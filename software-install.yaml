- name: Software Installation Playbook
  hosts: workstations
  become: true
  vars:
    GIT_Profile: "vonschutter"
    bundle_prefix: "recipe_Bundle:_"
  tasks:

    - name: Ensure essential packages are installed
      package:
        name:
          - curl
          - gnupg
          - apt-transport-https
          - wget
        state: present

    - name: Check if required commands are available
      block:
        - name: Ensure curl is installed
          package:
            name: curl
            state: present
          when: ansible_facts['pkg_mgr'] in ['apt', 'dnf', 'zypper']

        - name: Ensure gnupg is installed
          package:
            name: gnupg
            state: present
          when: ansible_facts['pkg_mgr'] in ['apt', 'dnf', 'zypper']
- name: Add Brave Browser Repository and Install
  block:
    # ------------------------- APT SYSTEMS ------------------------- #
    - name: Download Brave apt key
      ansible.builtin.get_url:
        url: https://brave-browser-apt-release.s3.brave.com/brave-core.asc
        dest: /tmp/brave-core.asc
        mode: '0644'
      when: ansible_facts['pkg_mgr'] == 'apt'

    - name: Convert Brave apt key to GPG keyring (idempotent)
      ansible.builtin.command:
        cmd: "gpg --dearmor /tmp/brave-core.asc > /usr/share/keyrings/brave-browser-archive-keyring.gpg"
        creates: /usr/share/keyrings/brave-browser-archive-keyring.gpg
      when: ansible_facts['pkg_mgr'] == 'apt'

    - name: Add Brave Browser APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"
        state: present
        filename: brave-browser
      when: ansible_facts['pkg_mgr'] == 'apt'

    - name: Install Brave Browser (APT)
      ansible.builtin.apt:
        name: brave-browser
        state: present
        update_cache: yes
      when: ansible_facts['pkg_mgr'] == 'apt'

    # ------------------------- DNF SYSTEMS ------------------------- #
    - name: Add Brave repo (DNF)
      ansible.builtin.command:
        cmd: "dnf config-manager --add-repo https://brave-browser-rpm-release.s3.brave.com/x86_64/"
        creates: /etc/yum.repos.d/brave-browser-rpm-release.s3.brave.com_x86_64_.repo
      when: ansible_facts['pkg_mgr'] == 'dnf'

    - name: Import Brave GPG key (DNF)
      ansible.builtin.rpm_key:
        key: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
        state: present
      when: ansible_facts['pkg_mgr'] == 'dnf'

    - name: Install Brave Browser (DNF)
      ansible.builtin.yum:
        name: brave-browser
        state: present
      when: ansible_facts['pkg_mgr'] == 'dnf'

    # ------------------------- ZYPPER SYSTEMS ------------------------- #
    - name: Add Brave Browser Zypper repo
      ansible.builtin.zypper_repository:
        name: brave-browser
        description: Brave Browser repository
        repo: https://brave-browser-rpm-release.s3.brave.com/x86_64/
        auto_import_keys: true
        state: present
      when: ansible_facts['pkg_mgr'] == 'zypper'

    - name: Install Brave Browser (Zypper)
      ansible.builtin.zypper:
        name: brave-browser
        state: present
      when: ansible_facts['pkg_mgr'] == 'zypper'

    # ------------------------- OTHER DISTROS ------------------------- #
    - name: Install Brave Browser on unsupported package manager
      ansible.builtin.shell:
        cmd: |
          set -e
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            case "$ID" in
              arch)
                if command -v pacman >/dev/null 2>&1; then
                  pacman -Sy --noconfirm brave-bin || pacman -Sy --noconfirm brave-browser
                else
                  echo "Pacman not found" >&2
                  exit 1
                fi
                ;;
              alpine)
                if command -v apk >/dev/null 2>&1; then
                  apk add --no-cache brave-browser
                else
                  echo "Apk not found" >&2
                  exit 1
                fi
                ;;
              *)
                echo "Unsupported package manager: $ID" >&2
                exit 1
                ;;
            esac
          else
            echo "Cannot determine the operating system." >&2
            exit 1
          fi
        executable: /bin/bash
      when: ansible_facts['pkg_mgr'] not in ['apt', 'dnf', 'zypper']

    - name: Install VirtualBox
      block:
        # - name: Install VirtualBox dependencies on Debian
        #   ansible.builtin.apt:
        #     name:
        #       - virtualbox
        #       - virtualbox-dkms
        #       - virtualbox-ext-pack
        #       - virtualbox-guest-additions-iso
        #     update_cache: yes
        #   when: ansible_facts['pkg_mgr'] == 'apt'

        - name: Install VirtualBox on DNF systems
          ansible.builtin.yum:
            name: VirtualBox
            state: present
          when: ansible_facts['pkg_mgr'] == 'dnf'

        - name: Install VirtualBox on Zypper systems
          ansible.builtin.zypper:
            name:
              - virtualbox
              - virtualbox-dkms
              - virtualbox-ext-pack
              - virtualbox-guest-additions-iso
            state: present
          when: ansible_facts['pkg_mgr'] == 'zypper'

        - name: Install VirtualBox on unsupported package manager
          ansible.builtin.shell:
            cmd: |
              if [ -f /etc/os-release ]; then
                . /etc/os-release
                case "$ID" in
                  arch)
                    if command -v pacman >/dev/null 2>&1; then
                      pacman -Sy --noconfirm virtualbox virtualbox-host-modules-arch
                    else
                      echo "Pacman not found"
                      exit 1
                    fi
                    ;;
                  alpine)
                    if command -v apk >/dev/null 2>&1; then
                      apk add --no-cache virtualbox
                    else
                      echo "Apk not found"
                      exit 1
                    fi
                    ;;
                  *)
                    echo "Unsupported package manager: $ID"
                    exit 1
                    ;;
                esac
              else
                echo "Cannot determine the operating system."
                exit 1
              fi
          when: ansible_facts['pkg_mgr'] not in ['apt', 'dnf', 'zypper']

    - name: Install System Admin Tools
      package:
        name:
          - nmap
          - synaptic
          - ssh
          - sshfs
          - htop
          - iftop
          - nethogs
          - glances
        state: present

    - name: Install Secure Communication Tools
      block:
        - name: Install Signal Desktop
          ansible.builtin.snap:
            name: signal-desktop
            state: present
          when: ansible_facts['pkg_mgr'] == 'snap'

        - name: Install Telegram Desktop
          ansible.builtin.snap:
            name: telegram-desktop
            state: present
          when: ansible_facts['pkg_mgr'] == 'snap'

        - name: Install Electron Mail
          ansible.builtin.snap:
            name: electron-mail
            state: present
          when: ansible_facts['pkg_mgr'] == 'snap'

    - name: Install Cloud Management Tools
      block:
        - name: Install Azure CLI
          ansible.builtin.snap:
            name: azure-cli-johanburati
            state: present
            classic: true
          when: ansible_facts['pkg_mgr'] == 'snap'

        - name: Install azure-functions-core-tools
          ansible.builtin.snap:
            name: azure-functions-core-tools-johanburati
            state: present
            classic: true
          when: ansible_facts['pkg_mgr'] == 'snap'

        - name: Install AWS CLI
          ansible.builtin.snap:
            name: aws-cli
            state: present
            classic: true
          when: ansible_facts['pkg_mgr'] == 'snap'

        - name: Install Google Cloud SDK
          ansible.builtin.snap:
            name: google-cloud-sdk
            state: present
          when: ansible_facts['pkg_mgr'] == 'snap'

        - name: Install Google Cloud CLI
          ansible.builtin.snap:
            name: google-cloud-cli
            state: present
            classic: true
          when: ansible_facts['pkg_mgr'] == 'snap'

        - name: google-bard
          ansible.builtin.snap:
            name: google-bard
            state: present
          when: ansible_facts['pkg_mgr'] == 'snap'


