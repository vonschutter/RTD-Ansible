#!/usr/bin/env bash

set -euo pipefail
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROLE_DIR="${SCRIPT_DIR}/roles"
ALL_GROUPS=(cloud rdp sec media office dev adm clean internet oem virtualization)

header() {
	printf "\n\033[1;36müîß RTD Role CLI - Recipe Automation Toolkit\033[0m\n"
}

usage() {
	header
	cat <<EOF

Usage: rtd-rolegen <command> [arg]

Commands:
  generate-roles            Generate roles from recipe definitions
  generate-playbook         Generate site.yml with all roles
  site <group>              Generate site-<group>.yml with only tagged roles
                            Groups: ${ALL_GROUPS[*]}
  install-role <role>       Run ansible-playbook for a single role
  lint                      Lint all role YAML files
  build-docs                Build markdown documentation from roles
  list                      List all roles and their tags
  reset-all                 Delete all roles and regenerate from source
  help                      Show this help message

EOF
}

generate_roles() {
	"$SCRIPT_DIR/generate_roles.sh"
}

generate_playbook() {
	local target="${1:-all}"
	local outfile="site"
	[[ "$target" != "all" ]] && outfile="site-${target}"

	cat > "${SCRIPT_DIR}/${outfile}.yml" <<EOF
---
- name: Run ${target} roles
  hosts: localhost
  become: true
  gather_facts: true

  roles:
EOF

	for dir in "$ROLE_DIR"/*/; do
		role=$(basename "$dir")
		if [[ "$target" == "all" ]]; then
			echo "    - ${role}" >> "${SCRIPT_DIR}/${outfile}.yml"
		else
			tagged=$(grep -i "tags:.*${target}" "$ROLE_DIR/$role/tasks/main.yml" || true)
			if [[ -n "$tagged" ]]; then
				echo "    - ${role}" >> "${SCRIPT_DIR}/${outfile}.yml"
			fi
		fi
	done

	printf "\033[0;32m‚úî Generated playbook: ${outfile}.yml\033[0m\n"
}

install_role() {
	local role="$1"
	if [[ ! -d "$ROLE_DIR/$role" ]]; then
		printf "\033[0;31m‚úò Role not found: %s\033[0m\n" "$role"
		exit 1
	fi

	cat > "$SCRIPT_DIR/install-${role}.yml" <<EOF
---
- name: Install single role ${role}
  hosts: localhost
  become: true
  gather_facts: true

  roles:
    - ${role}
EOF

	ansible-playbook "$SCRIPT_DIR/install-${role}.yml"
}

lint() {
	local fail=0
	printf "\n\033[1;34müîç Linting all role YAML...\033[0m\n"
	for f in "$ROLE_DIR"/*/tasks/main.yml; do
		if ! ansible-lint "$f" &>/dev/null; then
			printf "\033[0;31m‚úò Lint failed: %s\033[0m\n" "$f"
			fail=1
		else
			printf "\033[0;32m‚úî %s OK\033[0m\n" "$f"
		fi
	done

	if [[ "$fail" -eq 1 ]]; then
		exit 1
	fi
}

build_docs() {
	local outfile="ROLES.md"
	printf "# RTD Role Index\n\n" > "$outfile"
	for dir in "$ROLE_DIR"/*/; do
		role=$(basename "$dir")
		tags=$(grep -oP 'tags:\s*\[\K[^]]+' "$dir/tasks/main.yml" || true)
		printf "## %s\n\n" "$role" >> "$outfile"
		if [[ -n "$tags" ]]; then
			printf "- Tags: \`%s\`\n" "$tags" >> "$outfile"
		fi
		printf "- [README](roles/%s/README.md)\n\n" "$role" >> "$outfile"
	done
	printf "\033[0;32m‚úî Built role documentation: ROLES.md\033[0m\n"
}

list_roles() {
	printf "\n\033[1;36müì¶ Available RTD Roles:\033[0m\n\n"
	for dir in "$ROLE_DIR"/*/; do
		role=$(basename "$dir")
		tags=$(grep -oP 'tags:\s*\[\K[^]]+' "$dir/tasks/main.yml" || echo "none")
		printf "  ‚Ä¢ %-45s [tags: %s]\n" "$role" "$tags"
	done
}

reset_all() {
	rm -rf "$ROLE_DIR" ./site*.yml ./install-*.yml
	printf "\033[1;33m‚ö† All roles and playbooks removed.\033[0m\n"
	generate_roles
	generate_playbook all
}

# === Command Parser ===
case "${1:-}" in
	generate-roles) generate_roles ;;
	generate-playbook) generate_playbook all ;;
	site)
		group="${2:-}"
		if [[ " ${ALL_GROUPS[*]} " =~ " ${group} " ]]; then
			generate_playbook "$group"
		else
			printf "‚ùå Invalid group: %s\n" "$group"
			usage
			exit 1
		fi
		;;
	install-role)
		role="${2:-}"
		[[ -z "$role" ]] && { echo "‚ùå Missing role name"; exit 1; }
		install_role "$role"
		;;
	lint) lint ;;
	build-docs) build_docs ;;
	list) list_roles ;;
	reset-all) reset_all ;;
	help | -h | --help) usage ;;
	*) usage ;;
esac

